book controller
using Microsoft.AspNetCore.Mvc;
using YourNamespace.Models;
using System.Linq;

namespace YourNamespace.Controllers
{
    public class BookController : Controller
    {
        private readonly ApplicationDbContext _context;

        public BookController(ApplicationDbContext context)
        {
            _context = context;
        }

        // GET: Book/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: Book/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Create(Book book)
        {
            if (ModelState.IsValid)
            {
                _context.Books.Add(book);
                _context.SaveChanges();
                return RedirectToAction(nameof(Success));
            }
            return View(book);
        }

        // GET: Book/Success
        public IActionResult Success()
        {
            ViewBag.Message = "Book successfully created";
            return View();
        }
    }
}
============================================================================================
db
public class ApplicationDbContext : DbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }

    public DbSet<Book> Books { get; set; }
}
=======================================================================================================
UniqueTitleAttribute.cs
using System.ComponentModel.DataAnnotations;
using System.Linq;

namespace YourNamespace.Models
{
    public class UniqueTitleAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var dbContext = (ApplicationDbContext)validationContext.GetService(typeof(ApplicationDbContext));

            if (dbContext.Books.Any(b => b.Title == value.ToString()))
            {
                return new ValidationResult("Title must be unique");
            }

            return ValidationResult.Success;
        }
    }
}
======================================================================================================
PastDate
using System;
using System.ComponentModel.DataAnnotations;

namespace YourNamespace.Models
{
    public class PastDateAttribute : ValidationAttribute
    {
        public override bool IsValid(object value)
        {
            if (value == null) return false;

            DateTime dateValue;
            if (DateTime.TryParse(value.ToString(), out dateValue))
            {
                return dateValue < DateTime.Now;
            }

            return false;
        }
    }
}
=======================================================================
models
using System;
using System.ComponentModel.DataAnnotations;

namespace YourNamespace.Models
{
    public class Book
    {
        [Key]
        public int BookId { get; set; }

        [Required(ErrorMessage = "Title is required")]
        [UniqueTitle(ErrorMessage = "Title must be unique")]
        public string Title { get; set; }

        [Required(ErrorMessage = "Author is required")]
        public string Author { get; set; }

        [Required(ErrorMessage = "Genre is required")]
        public string Genre { get; set; }

        [PastDate(ErrorMessage = "Published date must be in the past")]
        [Required(ErrorMessage = "The value is invalid.")]
        public DateTime PublishedDate { get; set; }

        [Range(0.01, double.MaxValue, ErrorMessage = "Price must be greater than 0")]
        [Required(ErrorMessage = "The value is invalid.")]
        public decimal Price { get; set; }
    }
}
